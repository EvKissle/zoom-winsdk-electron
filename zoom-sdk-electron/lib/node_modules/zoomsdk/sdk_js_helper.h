#ifndef _SDK_JS_HELPER_H_
#define _SDK_JS_HELPER_H_
#include <node.h>
#include <string>
#include <v8.h>
#include "sdk_impl.h"
#include "thread_routing.h"
#define API_INITSDK "InitSDK"
#define API_CLEANUPSDK "CleanupSDK"
#define API_SDK_AUTH   "SDKAuth"
#define API_LOGIN	   "Login"
#define API_LOGOUT	   "Logout"
#define API_MEETINGSTATUS_CB	"SetMeetingStatusCB"
#define API_STARTMEETING "StartMeeting"
#define API_JOINMEETING "JoinMeeting"
#define API_LEAVEEETING "LeaveMeeting"
#define API_LOGIN_CB	"SetLoginCB"
#define API_LOGOUT_CB	"SetLogoutCB"

#define API_MEETINGUI_SHOWCHATDLG	"MeetingUI_ShowChatDlg"
#define API_MEETINGUI_HIDECHATDLG   "MeetingUI_HideChatDlg"
#define API_MEETINGUI_ENTERFS   "MeetingUI_EnterFullScreen"
#define API_MEETINGUI_EXITFS   "MeetingUI_ExitFullScreen"
#define API_MEETINGUI_SWITCHTOVIDEOWALL "MeetingUI_SwitchToVideoWall"
#define API_MEETINGUI_SWITCHTOACTIVESPEAKER "MeetingUI_SwtichToAcitveSpeaker"
#define API_MEETINGUI_MOVEFLOATVIDEO "MeetingUI_MoveFloatVideoWnd"
#define API_MEETINGUI_SHOWSHARINGTOOLBAR "MeetingUI_ShowSharingToolbar"
#define API_MEETINGUI_SWITCHFLOATVIDEOTOACTIVESPKMOD "MeetingUI_SwitchFloatVideoToActiveSpkMod"
#define API_MEETINGUI_CHANGEFLOATVIDEOSIZE "MeetingUI_ChangeFloatActiveSpkVideoSize"
#define API_MEETINGUI_SWITCHFLOATVIDEOTOGALLERYMODE "MeetingUI_SwitchFloatVideoToGalleryMod"
#define API_MEETINGUI_SHOWPLISTWND "MeetingUI_ShowParticipantsListWnd"
#define API_MEETINGUI_SHOWBOTTOMTOOLBAR "MeetingUI_ShowBottomFloatToolbarWnd"
#define API_MEETINGUI_SHOWJOINAUDIODLG "MeetingUI_ShowJoinAudioDlg"
#define API_MEETINGUI_HIDEJOINAUDIODLG "MeetingUI_HideJoinAudioDlg"

#define API_ANNOTATION_ISANNOTATIONDISABLE "Annotaion_IsAnnotaionDisable"
#define API_ANNOTATION_STARTANNOTATION "Annotaion_StartAnnotation"
#define API_ANNOTATION_STOPANNOTATION "Annotaion_StopAnnotation"
#define API_ANNOTATION_SETTOOL "Annotaion_SetTool"
#define API_ANNOTATION_CLEAR "Annotaion_Clear"
#define API_ANNOTATION_SETCOLOR "Annotaion_SetColor"
#define API_ANNOTATION_SETLINEWIDTH "Annotaion_SetLineWidth"
#define API_ANNOTATION_UNDO "Annotaion_Undo"
#define API_ANNOTATION_REDO "Annotaion_Redo"

#include "meetinguictrl_wrap.h"
#include "annotationctrl_wrap.h"
//#define _SUPPORT_RTTI_
using v8::Function;
using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::Null;
using v8::Object;
using v8::String;
using v8::Value;
using v8::Exception;
using v8::Persistent;
using v8::Handle;
using v8::HandleScope;
using v8::Number;
using v8::CopyablePersistentTraits;

typedef struct tagJSCBInfo
{
	Persistent<Function, CopyablePersistentTraits<Function>> apiResultCB;
	Persistent<Function, CopyablePersistentTraits<Function>> sdkauthCB;
	Persistent<Function, CopyablePersistentTraits<Function>> loginCB;
	Persistent<Function, CopyablePersistentTraits<Function>> logoutCB;
	Persistent<Function, CopyablePersistentTraits<Function>> meetingstatusCB;
}JSCBInfo;

struct SDKStartParam
{
	UINT64 meetingnumber;
};

struct SDKJoinParam
{
	UINT64 meetingnumber;
	std::wstring username;
};
class CSDKJSHelper : public ZOOM_SDK_NAMESPACE::IAuthServiceEvent, ZOOM_SDK_NAMESPACE::IMeetingServiceEvent
{
public:
	static CSDKJSHelper& GetInstance()
	{
		static CSDKJSHelper ob;
		return ob;
	}
	~CSDKJSHelper();
	JSCBInfo& GetCBInfo() { return m_jsCBInfo; }

	ZOOM_SDK_NAMESPACE::SDKError InitSDK(std::wstring& path, std::wstring& domian, int langid, bool bsplitmode);
	ZOOM_SDK_NAMESPACE::SDKError CleanupSDK();
	ZOOM_SDK_NAMESPACE::SDKError SDKAuth(std::wstring& appkey, std::wstring& appsecret);
	ZOOM_SDK_NAMESPACE::SDKError Login(std::wstring& username, std::wstring& psw, bool bRememberMe);
	ZOOM_SDK_NAMESPACE::SDKError Logout();

	virtual void onAuthenticationReturn(ZOOM_SDK_NAMESPACE::AuthResult ret);
	virtual void onLoginRet(ZOOM_SDK_NAMESPACE::LOGINSTATUS ret, ZOOM_SDK_NAMESPACE::IAccountInfo* pAccountInfo);
	virtual void onLogout();


	virtual void onMeetingStatusChanged(ZOOM_SDK_NAMESPACE::MeetingStatus status, int iResult = 0);
	virtual void onRecording2MP4Done(bool bsuccess, int iResult, const wchar_t* szPath) {};
	virtual void onRecording2MP4Processing(int iPercentage) {};
	virtual void onRecordingStatus(ZOOM_SDK_NAMESPACE::RecordingStatus status) {};
	virtual void onUserJoin(ZOOM_SDK_NAMESPACE::IList<unsigned int >* lstUserID, const wchar_t* strUserList = NULL) {};
	virtual void onUserLeft(ZOOM_SDK_NAMESPACE::IList<unsigned int >* lstUserID, const wchar_t* strUserList = NULL) {};
	virtual void onRemoteControlStatus(ZOOM_SDK_NAMESPACE::RemoteControlStatus status, unsigned int userId) {};
	virtual void onSharingStatus(ZOOM_SDK_NAMESPACE::SharingStatus status, unsigned int userId) {};
	virtual void onLockShareStatus(bool bLocked) {};
	virtual void onUserAudioStatusChange(ZOOM_SDK_NAMESPACE::IList<ZOOM_SDK_NAMESPACE::IUserAudioStatus* >* lstAudioStatusChange, const wchar_t* strAudioStatusList = NULL) {};
	virtual void onChatMsgNotifcation(ZOOM_SDK_NAMESPACE::IChatMsgInfo* chatMsg, const wchar_t* content = NULL) {};
	virtual void onUserVideoStatusChange(unsigned int userId, ZOOM_SDK_NAMESPACE::VideoStatus status) {};
	virtual void onHostChangeNotification(unsigned int userId) {};
	virtual void onSpotlightVideoChangeNotification(bool bSpotlight, unsigned int userid) {};
	virtual void onRecordPriviligeChanged(bool bCanRec) {};
	virtual void onLowOrRaiseHandStatusChanged(bool bLow, unsigned int userid) {};

	ZOOM_SDK_NAMESPACE::SDKError StartMeeting(SDKStartParam& param);
	ZOOM_SDK_NAMESPACE::SDKError JoinMeeting(SDKJoinParam& param);
	ZOOM_SDK_NAMESPACE::SDKError LeaveMeeting(bool bEnd);

	bool IsThreadSplitMode() { return m_bSplitmode; }
	bool PostTask2WorkThread(IJSCallTask* pTask, bool forceASync = false)
	{
		if (m_bSplitmode || forceASync)
		{
			CJSThreadMgr::GetInstance().PostTask2WorkThread(pTask);
		}
		else
		{
			if (pTask)
			{
				pTask->Run();
				delete pTask;
			}
		}

		return true;
	}
	template<class RET_TYPE>
	bool PostTask2WorkThread(IJSCallTask* pTask, RET_TYPE& retValue, bool forceASync = false)
	{
		if (m_bSplitmode || forceASync)
		{
			class TaskNotify : public IJSCallTaskStautsNotify
			{
			public:
				TaskNotify()
				{
					m_pret = NULL;
				}
#if (defined _SUPPORT_RTTI_)
				virtual void onReturnVauleNotifyRTTI(IRetStore* ret)
				{
					if (NULL == m_pret)
						return;
					RetVauleStore<RET_TYPE >* pReal = dynamic_cast<RetVauleStore<RET_TYPE >*>(ret);
					if (pReal)
					{
						*m_pret = pReal->GetValue();
					}
				}
#else
				virtual void onReturnVauleNotify(void* ret)
				{
					if (NULL == m_pret)
						return;
					RetVauleStore<RET_TYPE >* pReal = (RetVauleStore<RET_TYPE >*)ret;
					if (pReal && pReal->HasRetValue())
					{
						*m_pret = pReal->GetValue();
					}
				}
#endif

			public:
				RET_TYPE* m_pret;
			};

			TaskNotify* pNotify = new TaskNotify;
			if (pNotify)
			{
				pNotify->m_pret = &retValue;
			}
			pTask->SetNotifyHandler(pNotify);
			CJSThreadMgr::GetInstance().PostTask2WorkThread(pTask);
		}
		else
		{
			if (pTask)
			{
				pTask->Run();
				//Nodejs addon default no RTTI

#if (defined _SUPPORT_RTTI_)
				IRetStore* pStore = pTask->GetRetValue();
				if (pStore && pStore->HasRetValue())
				{
					RetVauleStore<RET_TYPE >* pReal = dynamic_cast<RetVauleStore<RET_TYPE >*>(pStore);
					if (pReal)
					{
						retValue = pReal->GetValue();
					}
				}
#else
				RetVauleStore<RET_TYPE >* pReal = (RetVauleStore<RET_TYPE >*)pTask->GetRetValueNoRTTI();
				if (pReal && pReal->HasRetValue())
				{
					retValue = pReal->GetValue();
				}
#endif
				delete pTask;
			}
		}

		return true;
	}

	bool PostTask2JSThread(IJSCallTask* pTask)
	{
		if (m_bSplitmode)
		{
			return CJSThreadMgr::GetInstance().PostTask2JSThread(pTask);
		}

		if (pTask)
		{
			pTask->Run();
			delete pTask;
		}

		return true;
	}

	void NotifyAPICallResult(const char* strAPI, ZOOM_SDK_NAMESPACE::SDKError err);


	CMeetingUICtrlWrap* GetMeetingUICtrl();
	CAnnotationCtrlWrap* GeAnnotationCtrl();

private:
	CSDKJSHelper();
	void Reset();
	void ProcNotifyAPICallResultTask(std::string strAPI, ZOOM_SDK_NAMESPACE::SDKError err);
	ZOOM_SDK_NAMESPACE::SDKError ProcInitSDKTask(std::wstring domain, int langid);
	ZOOM_SDK_NAMESPACE::SDKError ProcCleanupSDK();
	ZOOM_SDK_NAMESPACE::SDKError ProcSDKAuth(std::wstring appkey, std::wstring appsecret);
	void onAuthenticationReturnTask(ZOOM_SDK_NAMESPACE::AuthResult ret);
	ZOOM_SDK_NAMESPACE::SDKError ProcLogin(std::wstring username, std::wstring psw, bool bRememberMe);
	void onLoginRetTask(ZOOM_SDK_NAMESPACE::LOGINSTATUS ret);
	ZOOM_SDK_NAMESPACE::SDKError ProcLogout();
	void onLogoutTask();

	ZOOM_SDK_NAMESPACE::SDKError ProcStartMeeting(SDKStartParam* param);
	ZOOM_SDK_NAMESPACE::SDKError ProcJoinMeeting(SDKJoinParam* param);
	ZOOM_SDK_NAMESPACE::SDKError ProcLeaveMeeting(bool bEnd);
	void onMeetingStatusChangedTask(ZOOM_SDK_NAMESPACE::MeetingStatus status, int iResult = 0);

	void CongfigMeeting();

	bool m_bInit;
	bool m_bSplitmode;
	JSCBInfo m_jsCBInfo;
	ZOOM_SDK_NAMESPACE::IAuthService* m_pAuthService;
	ZOOM_SDK_NAMESPACE::IMeetingService* m_pMeetingService;
	CMeetingUICtrlWrap m_obMeetingUICtrlWrap;
	CAnnotationCtrlWrap m_obAnnotationCtrlWrap;
	bool m_bInMeeting;
};
#endif