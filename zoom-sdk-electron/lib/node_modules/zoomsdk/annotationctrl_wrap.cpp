#include "annotationctrl_wrap.h"
CAnnotationCtrlWrap::CAnnotationCtrlWrap()
{
	m_pRealAnnotationCtrl = NULL;
}

CAnnotationCtrlWrap::~CAnnotationCtrlWrap()
{
	m_pRealAnnotationCtrl = NULL;
}

void CAnnotationCtrlWrap::SetIAnnotationObj(ZOOM_SDK_NAMESPACE::IAnnotationController* pCtrl)
{
	m_pRealAnnotationCtrl = pCtrl;
}

bool CAnnotationCtrlWrap::IsAnnoataionDisable()
{
	bool bDisable(false);
	do
	{
		IJSCallTask* pTask = new TaskViaParam0< CAnnotationCtrlWrap, bool >(this, &CAnnotationCtrlWrap::IsAnnoataionDisableTask, false);
		if (NULL == pTask)
			break;

		HANDLE hWaitEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
		if (hWaitEvent)
		{
			pTask->SetWaitEvent(hWaitEvent);
		}
		if (!CSDKJSHelper::GetInstance().PostTask2WorkThread<bool>(pTask, bDisable))
			break;
		if (hWaitEvent)
		{
			WaitForSingleObject(hWaitEvent, INFINITE);
			CloseHandle(hWaitEvent);
		}
	} while (false);

	return bDisable;
}

bool CAnnotationCtrlWrap::IsAnnoataionDisableTask()
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealAnnotationCtrl)
	{
		return m_pRealAnnotationCtrl->IsAnnoataionDisable();
	}

	//CSDKJSHelper::GetInstance().NotifyAPICallResult(API_ANNOTATION_ISANNOTATIONDISABLE, err);

	return false;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::StartAnnotation(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, int left, int top)
{
	LOG_FUNC("CAnnotationCtrlWrap::StartAnnotation");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam3 < CAnnotationCtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::SDKViewType, int, int >(this, &CAnnotationCtrlWrap::StartAnnotationTask, viewtype, left, top, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::StartAnnotationTask(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, int left, int top)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealAnnotationCtrl)
	{
		err = m_pRealAnnotationCtrl->StartAnnotation(viewtype, left, top);
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_ANNOTATION_STARTANNOTATION, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::StopAnnotation(ZOOM_SDK_NAMESPACE::SDKViewType viewtype)
{
	LOG_FUNC("CAnnotationCtrlWrap::StopAnnotation");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam1 < CAnnotationCtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::SDKViewType >(this, &CAnnotationCtrlWrap::StopAnnotationTask, viewtype, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::StopAnnotationTask(ZOOM_SDK_NAMESPACE::SDKViewType viewtype)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealAnnotationCtrl)
	{
		err = m_pRealAnnotationCtrl->StopAnnotation(viewtype);
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_ANNOTATION_STOPANNOTATION, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::SetTool(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, ZOOM_SDK_NAMESPACE::AnnotationToolType type)
{
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam2 < CAnnotationCtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::SDKViewType, ZOOM_SDK_NAMESPACE::AnnotationToolType >(this, &CAnnotationCtrlWrap::SetToolTask, viewtype, type, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::SetToolTask(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, ZOOM_SDK_NAMESPACE::AnnotationToolType type)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealAnnotationCtrl)
	{
		err = m_pRealAnnotationCtrl->SetTool(viewtype, type);
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_ANNOTATION_SETTOOL, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::Clear(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, ZOOM_SDK_NAMESPACE::AnnotationClearType type)
{
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam2 < CAnnotationCtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::SDKViewType, ZOOM_SDK_NAMESPACE::AnnotationClearType >(this, &CAnnotationCtrlWrap::ClearTask, viewtype, type, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::ClearTask(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, ZOOM_SDK_NAMESPACE::AnnotationClearType type)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealAnnotationCtrl)
	{
		err = m_pRealAnnotationCtrl->Clear(viewtype, type);
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_ANNOTATION_CLEAR, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::SetColor(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, unsigned long color)
{
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam2 < CAnnotationCtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::SDKViewType, unsigned long >(this, &CAnnotationCtrlWrap::SetColorTask, viewtype, color, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::SetColorTask(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, unsigned long color)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealAnnotationCtrl)
	{
		err = m_pRealAnnotationCtrl->SetColor(viewtype, color);
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_ANNOTATION_SETCOLOR, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::SetLineWidth(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, long lineWidth)
{
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam2 < CAnnotationCtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::SDKViewType, long >(this, &CAnnotationCtrlWrap::SetLineWidthTask, viewtype, lineWidth, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::SetLineWidthTask(ZOOM_SDK_NAMESPACE::SDKViewType viewtype, long lineWidth)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealAnnotationCtrl)
	{
		err = m_pRealAnnotationCtrl->SetLineWidth(viewtype, lineWidth);
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_ANNOTATION_SETLINEWIDTH, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::Undo(ZOOM_SDK_NAMESPACE::SDKViewType viewtype)
{
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam1 < CAnnotationCtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::SDKViewType >(this, &CAnnotationCtrlWrap::UndoTask, viewtype, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::UndoTask(ZOOM_SDK_NAMESPACE::SDKViewType viewtype)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealAnnotationCtrl)
	{
		err = m_pRealAnnotationCtrl->Undo(viewtype);
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_ANNOTATION_UNDO, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::Redo(ZOOM_SDK_NAMESPACE::SDKViewType viewtype)
{
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam1 < CAnnotationCtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::SDKViewType >(this, &CAnnotationCtrlWrap::RedoTask, viewtype, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CAnnotationCtrlWrap::RedoTask(ZOOM_SDK_NAMESPACE::SDKViewType viewtype)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealAnnotationCtrl)
	{
		err = m_pRealAnnotationCtrl->Redo(viewtype);
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_ANNOTATION_REDO, err);

	return err;
}