
namespace zoomsdk {
	void MeetingUI_ShowChatDlg(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 5) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber() ||
			!args[1]->IsNumber() ||
			!args[2]->IsNumber() ||
			!args[3]->IsNumber() ||
			!args[4]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::ShowChatDlgParam param;
		param.hParent = (HWND)(int)args[0]->NumberValue();
		param.rect.left = (int)args[1]->NumberValue();
		param.rect.top = (int)args[2]->NumberValue();
		param.rect.right = (int)args[3]->NumberValue();
		param.rect.bottom = (int)args[4]->NumberValue();

		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->ShowChatDlg(param);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_HideChatDlg(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->HideChatDlg();
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_EnterFullScreen(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 2) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsBoolean() ||
			!args[1]->IsBoolean())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		Local<Boolean> firstview = args[0]->ToBoolean();
		bool bFirstView = firstview->BooleanValue() ? true : false;
		Local<Boolean> secview = args[1]->ToBoolean();
		bool bSecView = secview->BooleanValue() ? true : false;
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->EnterFullScreen(bFirstView, bSecView);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_ExitFullScreen(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 2) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsBoolean() ||
			!args[1]->IsBoolean())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		Local<Boolean> firstview = args[0]->ToBoolean();
		bool bFirstView = firstview->BooleanValue() ? true : false;
		Local<Boolean> secview = args[1]->ToBoolean();
		bool bSecView = secview->BooleanValue() ? true : false;
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->ExitFullScreen(bFirstView, bSecView);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_SwitchToVideoWall(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->SwitchToVideoWall();
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_SwtichToAcitveSpeaker(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->SwtichToAcitveSpeaker();
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_MoveFloatVideoWnd(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 2) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber() ||
			!args[1]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::ShowChatDlgParam param;
		int left = (int)args[0]->NumberValue();
		int top = (int)args[1]->NumberValue();
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->MoveFloatVideoWnd(left, top);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_ShowSharingToolbar(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsBoolean())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		Local<Boolean> show = args[0]->ToBoolean();
		bool bShow = show->BooleanValue() ? true : false;
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->ShowSharingToolbar(bShow);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_SwitchFloatVideoToActiveSpkMod(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->SwitchFloatVideoToActiveSpkMod();
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_ChangeFloatActiveSpkVideoSize(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::ShowChatDlgParam param;
		ZOOM_SDK_NAMESPACE::SDKFloatVideoType type = (ZOOM_SDK_NAMESPACE::SDKFloatVideoType)(int)args[0]->NumberValue();
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->ChangeFloatoActiveSpkVideoSize(type);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_SwitchFloatVideoToGalleryMod(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->SwitchFloatVideoToGalleryMod();
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_ShowParticipantsListWnd(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsBoolean())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		Local<Boolean> show = args[0]->ToBoolean();
		bool bShow = show->BooleanValue() ? true : false;
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			HWND hPlistWnd(NULL);
			sdkerr = pUICtrl->ShowParticipantsListWnd(bShow, hPlistWnd);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_ShowBottomFloatToolbarWnd(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsBoolean())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		Local<Boolean> show = args[0]->ToBoolean();
		bool bShow = show->BooleanValue() ? true : false;
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->ShowBottomFloatToolbarWnd(bShow);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_ShowJoinAudioDlg(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->ShowJoinAudioDlg();
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void MeetingUI_HideJoinAudioDlg(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		CMeetingUICtrlWrap* pUICtrl = CSDKJSHelper::GetInstance().GetMeetingUICtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pUICtrl)
		{
			sdkerr = pUICtrl->HideJoinAudioDlg();
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}
}