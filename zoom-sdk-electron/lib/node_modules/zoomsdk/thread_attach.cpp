#include "thread_attach.h"
CThreadAttach::CThreadAttach()
{
	m_hook = NULL;
	m_threadid = 0;
}

CThreadAttach::~CThreadAttach()
{
	Uninit();
}

LRESULT CALLBACK myGetMsgProc(
	_In_ int    code,
	_In_ WPARAM wParam,
	_In_ LPARAM lParam
)
{
	do
	{
		if (HC_ACTION != code || PM_REMOVE != wParam)
			break;

		if (0 == lParam)
			break;
		LPMSG pMsg = (LPMSG)lParam;
		if (WM_JS_WORK_MESSAGE == pMsg->message)
		{
			if (lParam)
			{
				CThreadAttach* pAttach = (CThreadAttach*)pMsg->lParam;
				if (pAttach)
				{
					pAttach->HandlerJSTask((IJSCallTask*)pMsg->wParam);
				}
			}
			return 0;
		}
	} while (false);

	return CallNextHookEx(NULL, code, wParam, lParam);
}

void CThreadAttach::Init(DWORD threadid)
{
	if (NULL == m_hook)
	{
		m_threadid = threadid;
		m_hook = SetWindowsHookExW(WH_GETMESSAGE, myGetMsgProc, NULL, threadid);
	}

	myOutputDebugString("CThreadAttach::Init-threadid-%d-hookid-%d", threadid, m_hook);
}

void CThreadAttach::Uninit()
{
	if (m_hook)
	{
		UnhookWindowsHookEx(m_hook);
		m_hook = NULL;
	}

	m_threadid = 0;
	m_TaskLock.Lock();
	std::set<IJSCallTask*>::iterator iter = m_TaskList.begin();
	for (; m_TaskList.end() != iter; iter++)
	{
		IJSCallTask* pTask = *iter;
		if (pTask)
		{
			delete pTask;
		}
	}
	m_TaskList.clear();
	m_TaskLock.Unlock();
}

bool CThreadAttach::PostMsg(IJSCallTask* pMsg)
{
	bool bRet(false);
	//if same thread, run directly
	if (pMsg && pMsg->GetCallerThreadID() == m_threadid)
	{
		pMsg->Run();
		delete pMsg;
		return true;
	}

	if (m_hook)
	{
		bRet = ::PostThreadMessage(m_threadid, WM_JS_WORK_MESSAGE, (WPARAM)pMsg, (LPARAM)this) ? true : false;
		if (bRet)
		{
			m_TaskLock.Lock();
			m_TaskList.insert(pMsg);
			m_TaskLock.Unlock();
		}
	}
	else if (pMsg)
	{
		delete pMsg;
	}

	return bRet;
}

void CThreadAttach::HandlerJSTask(IJSCallTask* pMsg)
{
	if (pMsg)
	{
		pMsg->Run();

		m_TaskLock.Lock();
		m_TaskList.erase(pMsg);
		m_TaskLock.Unlock();

		delete pMsg;
	}
}