#include <node.h>
#include <v8.h>
#include <Windows.h>
#include "sdk_js_helper.h"
using v8::Function;
using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::Null;
using v8::Object;
using v8::String;
using v8::Value;
using v8::Exception;
using v8::Persistent;
using v8::Handle;
using v8::CopyablePersistentTraits;
using v8::Boolean;
#include "zoomsdk_meetingui.cpp"
#include "zoomsdk_annotation.cpp"
namespace zoomsdk {
	void utf8to16(const char* src, std::wstring& buffer)
	{
		buffer.resize(MultiByteToWideChar(CP_UTF8, 0, src, -1, 0, 0));
		MultiByteToWideChar(CP_UTF8, 0, src, -1, &buffer[0], buffer.size());
	}

	void convertV8String2Wstring(Local<String>& str, std::wstring& output)
	{
		if (str->Utf8Length() == 0)
			return;

		std::string utf8;
		utf8.resize(str->Utf8Length()+1);
		str->WriteUtf8(const_cast<char*>(utf8.c_str()), str->Utf8Length());
		utf8to16(utf8.c_str(), output);
	}

	void InitSDK(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 5) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}

		if (!args[0]->IsString() || 
			!args[1]->IsString() ||
			!args[2]->IsNumber() ||
			!args[3]->IsFunction() ||
			!args[4]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}

		Local<String> path = args[0]->ToString();
		std::wstring wpath;
		convertV8String2Wstring(path, wpath);

		Local<String> domain = args[1]->ToString();
		std::wstring wdomain;
		convertV8String2Wstring(domain, wdomain);

		int langid = (int)args[2]->NumberValue();

		Handle<Function> cbfunc = Handle<Function>::Cast(args[3]);
		Persistent<Function, CopyablePersistentTraits<Function>> cb(isolate, cbfunc);
		CSDKJSHelper::GetInstance().GetCBInfo().apiResultCB = cb;
		int splitmode = (int)args[4]->NumberValue();
		bool bsplitmode = (1 == splitmode) ? true : false;
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = CSDKJSHelper::GetInstance().InitSDK(wpath, wdomain, langid, bsplitmode);
		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void CleanupSDK(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = CSDKJSHelper::GetInstance().CleanupSDK();
		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void AuthSDK(const FunctionCallbackInfo<Value>& args)
	{
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 3) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}

		if (!args[0]->IsString() ||
			!args[1]->IsString() ||
			!args[2]->IsFunction())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}

		Local<String> appkey = args[0]->ToString();
		std::wstring wappkey;
		convertV8String2Wstring(appkey, wappkey);

		Local<String> appsecret = args[1]->ToString();
		std::wstring wappsecret;
		convertV8String2Wstring(appsecret, wappsecret);

		Handle<Function> cbfunc = Handle<Function>::Cast(args[2]);
		Persistent<Function, CopyablePersistentTraits<Function>> cb(isolate, cbfunc);
		CSDKJSHelper::GetInstance().GetCBInfo().sdkauthCB = cb;

		ZOOM_SDK_NAMESPACE::SDKError sdkerr = CSDKJSHelper::GetInstance().SDKAuth(wappkey, wappsecret);
		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void SetLoginCB(const FunctionCallbackInfo<Value>& args)
	{
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}

		if (!args[0]->IsFunction())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}

		Handle<Function> cbfunc = Handle<Function>::Cast(args[0]);
		Persistent<Function, CopyablePersistentTraits<Function>> cb(isolate, cbfunc);
		CSDKJSHelper::GetInstance().GetCBInfo().loginCB = cb;

		Local<v8::Number> bret = v8::Number::New(isolate, (double)ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS);
		args.GetReturnValue().Set(bret);
	}

	void SetLogoutCB(const FunctionCallbackInfo<Value>& args)
	{
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}

		if (!args[0]->IsFunction())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}

		Handle<Function> cbfunc = Handle<Function>::Cast(args[0]);
		Persistent<Function, CopyablePersistentTraits<Function>> cb(isolate, cbfunc);
		CSDKJSHelper::GetInstance().GetCBInfo().logoutCB = cb;

		Local<v8::Number> bret = v8::Number::New(isolate, (double)ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS);
		args.GetReturnValue().Set(bret);
	}

	void Login(const FunctionCallbackInfo<Value>& args)
	{
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 3) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}

		if (!args[0]->IsString() ||
			!args[1]->IsString() ||
			!args[2]->IsBoolean())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}

		Local<String> email = args[0]->ToString();
		std::wstring wemail;
		convertV8String2Wstring(email, wemail);

		Local<String> psw = args[1]->ToString();
		std::wstring wpsw;
		convertV8String2Wstring(psw, wpsw);
		Local<Boolean> rememberme = args[2]->ToBoolean();
		bool bRememberMe = rememberme->BooleanValue() ? true : false;

		ZOOM_SDK_NAMESPACE::SDKError err = CSDKJSHelper::GetInstance().Login(wemail, wpsw, bRememberMe);
		Local<v8::Number> bret = v8::Number::New(isolate, (double)ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS);
		args.GetReturnValue().Set(bret);
	}

	void Logout(const FunctionCallbackInfo<Value>& args) {

		Isolate* isolate = args.GetIsolate();
		ZOOM_SDK_NAMESPACE::SDKError err = CSDKJSHelper::GetInstance().Logout();
		Local<v8::Number> bret = v8::Number::New(isolate, (double)err);
		args.GetReturnValue().Set(bret);
	}

	void SetMeetingStatusCB(const FunctionCallbackInfo<Value>& args){
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}

		if (!args[0]->IsFunction())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}

		Handle<Function> cbfunc = Handle<Function>::Cast(args[0]);
		Persistent<Function, CopyablePersistentTraits<Function>> cb(isolate, cbfunc);
		CSDKJSHelper::GetInstance().GetCBInfo().meetingstatusCB = cb;

		Local<v8::Number> bret = v8::Number::New(isolate, (double)ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS);
		args.GetReturnValue().Set(bret);
	}

	void StartMeeting(const FunctionCallbackInfo<Value>& args) {

		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		UINT64 meetingnum = (UINT64)args[0]->NumberValue();
		SDKStartParam param;
		param.meetingnumber = meetingnum;
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = CSDKJSHelper::GetInstance().StartMeeting(param);
		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void JoinMeeting(const FunctionCallbackInfo<Value>& args) {

		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 2) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber() ||
			!args[1]->IsString())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		UINT64 meetingnum = (UINT64)args[0]->NumberValue();
		Local<String> username = args[1]->ToString();
		std::wstring wusername;
		convertV8String2Wstring(username, wusername);

		SDKJoinParam param;
		param.meetingnumber = meetingnum;
		param.username = wusername;
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = CSDKJSHelper::GetInstance().JoinMeeting(param);
		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void LeaveMeeting(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}

		if (!args[0]->IsBoolean())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		Local<Boolean> endmeeting = args[0]->ToBoolean();
		bool bEnd = endmeeting->BooleanValue() ? true : false;

		ZOOM_SDK_NAMESPACE::SDKError sdkerr = CSDKJSHelper::GetInstance().LeaveMeeting(bEnd);
		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void Init(Local<Object> exports, Local<Object> module) {
		NODE_SET_METHOD(exports, API_INITSDK, InitSDK);
		NODE_SET_METHOD(exports, API_CLEANUPSDK, CleanupSDK);
		NODE_SET_METHOD(exports, API_SDK_AUTH, AuthSDK);
		NODE_SET_METHOD(exports, API_LOGIN_CB, SetLoginCB);
		NODE_SET_METHOD(exports, API_LOGOUT_CB, SetLogoutCB);
		NODE_SET_METHOD(exports, API_LOGIN, Login);
		NODE_SET_METHOD(exports, API_LOGOUT, Logout);
		NODE_SET_METHOD(exports, API_MEETINGSTATUS_CB, SetMeetingStatusCB);
		NODE_SET_METHOD(exports, API_STARTMEETING, StartMeeting);
		NODE_SET_METHOD(exports, API_JOINMEETING, JoinMeeting);
		NODE_SET_METHOD(exports, API_LEAVEEETING, LeaveMeeting);

		NODE_SET_METHOD(exports, API_MEETINGUI_SHOWCHATDLG, MeetingUI_ShowChatDlg);
		NODE_SET_METHOD(exports, API_MEETINGUI_HIDECHATDLG, MeetingUI_HideChatDlg);
		NODE_SET_METHOD(exports, API_MEETINGUI_ENTERFS, MeetingUI_EnterFullScreen);
		NODE_SET_METHOD(exports, API_MEETINGUI_EXITFS, MeetingUI_ExitFullScreen);
		NODE_SET_METHOD(exports, API_MEETINGUI_SWITCHTOVIDEOWALL, MeetingUI_SwitchToVideoWall);
		NODE_SET_METHOD(exports, API_MEETINGUI_SWITCHTOACTIVESPEAKER, MeetingUI_SwtichToAcitveSpeaker);
		NODE_SET_METHOD(exports, API_MEETINGUI_MOVEFLOATVIDEO, MeetingUI_MoveFloatVideoWnd);
		NODE_SET_METHOD(exports, API_MEETINGUI_SHOWSHARINGTOOLBAR, MeetingUI_ShowSharingToolbar);
		NODE_SET_METHOD(exports, API_MEETINGUI_SWITCHFLOATVIDEOTOACTIVESPKMOD, MeetingUI_SwitchFloatVideoToActiveSpkMod);
		NODE_SET_METHOD(exports, API_MEETINGUI_CHANGEFLOATVIDEOSIZE, MeetingUI_ChangeFloatActiveSpkVideoSize);
		NODE_SET_METHOD(exports, API_MEETINGUI_SWITCHFLOATVIDEOTOGALLERYMODE, MeetingUI_SwitchFloatVideoToGalleryMod);
		NODE_SET_METHOD(exports, API_MEETINGUI_SHOWPLISTWND, MeetingUI_ShowParticipantsListWnd);
		NODE_SET_METHOD(exports, API_MEETINGUI_SHOWBOTTOMTOOLBAR, MeetingUI_ShowBottomFloatToolbarWnd);
		NODE_SET_METHOD(exports, API_MEETINGUI_SHOWJOINAUDIODLG, MeetingUI_ShowJoinAudioDlg);
		NODE_SET_METHOD(exports, API_MEETINGUI_HIDEJOINAUDIODLG, MeetingUI_HideJoinAudioDlg);


		NODE_SET_METHOD(exports, API_ANNOTATION_ISANNOTATIONDISABLE, Annotaion_IsAnnotaionDisable);
		NODE_SET_METHOD(exports, API_ANNOTATION_STARTANNOTATION, Annotaion_StartAnnotation);
		NODE_SET_METHOD(exports, API_ANNOTATION_STOPANNOTATION, Annotaion_StopAnnotation);
		NODE_SET_METHOD(exports, API_ANNOTATION_SETTOOL, Annotaion_SetTool);
		NODE_SET_METHOD(exports, API_ANNOTATION_CLEAR, Annotaion_Clear);
		NODE_SET_METHOD(exports, API_ANNOTATION_SETCOLOR, Annotaion_SetColor);
		NODE_SET_METHOD(exports, API_ANNOTATION_SETLINEWIDTH, Annotaion_SetLineWidth);
		NODE_SET_METHOD(exports, API_ANNOTATION_UNDO, Annotaion_Undo);
		NODE_SET_METHOD(exports, API_ANNOTATION_REDO, Annotaion_Redo);

	}

	NODE_MODULE(zoomsdk, Init)

}  // namespace zoomsdk

#include "thread_attach.cpp"
#include "thread_routing.cpp"
#include "sdk_impl.cpp"
#include "sdk_js_helper.cpp"
#include "meetinguictrl_wrap.cpp"
#include "annotationctrl_wrap.cpp"