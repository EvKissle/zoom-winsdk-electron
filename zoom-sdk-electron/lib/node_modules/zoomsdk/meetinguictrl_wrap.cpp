#include "meetinguictrl_wrap.h"
CMeetingUICtrlWrap::CMeetingUICtrlWrap()
{
	m_pRealMeetingUICtrl = NULL;
}

CMeetingUICtrlWrap::~CMeetingUICtrlWrap()
{
	m_pRealMeetingUICtrl = NULL;
}

void CMeetingUICtrlWrap::SetMeetingUIObj(ZOOM_SDK_NAMESPACE::IMeetingUIController* pUICtrl)
{
	m_pRealMeetingUICtrl = pUICtrl;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowChatDlg(ZOOM_SDK_NAMESPACE::ShowChatDlgParam& param)
{
	LOG_FUNC("CMeetingUICtrlWrap::ShowChatDlg");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam1 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::ShowChatDlgParam* >(this, &CMeetingUICtrlWrap::ShowChatDlgTask, &param, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowChatDlgTask(ZOOM_SDK_NAMESPACE::ShowChatDlgParam* param)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		if (param)
		{
			err = m_pRealMeetingUICtrl->ShowChatDlg(*param);
		}
		else
		{
			err = ZOOM_SDK_NAMESPACE::SDKERR_INVALID_PARAMETER;
		}
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_SHOWCHATDLG, err);

	return err;
}
ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::HideChatDlg()
{
	LOG_FUNC("CMeetingUICtrlWrap::HideChatDlg");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam0 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError >(this, &CMeetingUICtrlWrap::HideChatDlgTask, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::HideChatDlgTask()
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->HideChatDlg();
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_HIDECHATDLG, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::EnterFullScreen(bool firstView, bool secondView)
{
	LOG_FUNC("CMeetingUICtrlWrap::EnterFullScreen");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam2 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, bool, bool >(this, &CMeetingUICtrlWrap::EnterFullScreenTask, firstView, secondView, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::EnterFullScreenTask(bool firstView, bool secondView)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->EnterFullScreen(firstView, secondView);
	}

	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_ENTERFS, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ExitFullScreen(bool firstView, bool secondView)
{
	LOG_FUNC("CMeetingUICtrlWrap::ExitFullScreen");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam2 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, bool, bool >(this, &CMeetingUICtrlWrap::ExitFullScreenTask, firstView, secondView, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ExitFullScreenTask(bool firstView, bool secondView)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->ExitFullScreen(firstView, secondView);
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_EXITFS, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::SwitchToVideoWall()
{
	LOG_FUNC("CMeetingUICtrlWrap::SwitchToVideoWall");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam0 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError >(this, &CMeetingUICtrlWrap::SwitchToVideoWallTask, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::SwitchToVideoWallTask()
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->SwitchToVideoWall();
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_SWITCHTOVIDEOWALL, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::SwtichToAcitveSpeaker()
{
	LOG_FUNC("CMeetingUICtrlWrap::SwtichToAcitveSpeaker");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam0 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError >(this, &CMeetingUICtrlWrap::SwtichToAcitveSpeakerTask, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::SwtichToAcitveSpeakerTask()
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->SwtichToAcitveSpeaker();
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_SWITCHTOACTIVESPEAKER, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::MoveFloatVideoWnd(int left, int top)
{
	LOG_FUNC("CMeetingUICtrlWrap::MoveFloatVideoWnd");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam2 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, int, int >(this, &CMeetingUICtrlWrap::MoveFloatVideoWndTask, left, top, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::MoveFloatVideoWndTask(int left, int top)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->MoveFloatVideoWnd(left, top);
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_MOVEFLOATVIDEO, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowSharingToolbar(bool bShow)
{
	LOG_FUNC("CMeetingUICtrlWrap::ShowSharingToolbar");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam1 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, bool >(this, &CMeetingUICtrlWrap::ShowSharingToolbarTask, bShow, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowSharingToolbarTask(bool bShow)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->ShowSharingToolbar(bShow);
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_SHOWSHARINGTOOLBAR, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::SwitchFloatVideoToActiveSpkMod()
{
	LOG_FUNC("CMeetingUICtrlWrap::SwitchFloatVideoToActiveSpkMod");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam0 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError >(this, &CMeetingUICtrlWrap::SwitchFloatVideoToActiveSpkModTask, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::SwitchFloatVideoToActiveSpkModTask()
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->SwitchFloatVideoToActiveSpkMod();
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_SWITCHFLOATVIDEOTOACTIVESPKMOD, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ChangeFloatoActiveSpkVideoSize(ZOOM_SDK_NAMESPACE::SDKFloatVideoType type)
{
	LOG_FUNC("CMeetingUICtrlWrap::SwitchFloatVideoToActiveSpkMod");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam1 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, ZOOM_SDK_NAMESPACE::SDKFloatVideoType >(this, &CMeetingUICtrlWrap::ChangeFloatoActiveSpkVideoSizeTask, type, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ChangeFloatoActiveSpkVideoSizeTask(ZOOM_SDK_NAMESPACE::SDKFloatVideoType type)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->ChangeFloatoActiveSpkVideoSize(type);
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_CHANGEFLOATVIDEOSIZE, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::SwitchFloatVideoToGalleryMod()
{
	LOG_FUNC("CMeetingUICtrlWrap::SwitchFloatVideoToGalleryMod");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam0 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError >(this, &CMeetingUICtrlWrap::SwitchFloatVideoToGalleryModTask, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::SwitchFloatVideoToGalleryModTask()
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->SwitchFloatVideoToGalleryMod();
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_SWITCHFLOATVIDEOTOGALLERYMODE, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowParticipantsListWnd(bool bShow, HWND& hParticipantsListWnd)
{
	LOG_FUNC("CMeetingUICtrlWrap::ShowParticipantsListWnd");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam2 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, bool, HWND* >(this, &CMeetingUICtrlWrap::ShowParticipantsListWndTask, bShow, &hParticipantsListWnd, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowParticipantsListWndTask(bool bShow, HWND* hParticipantsListWnd)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		if (hParticipantsListWnd)
		{
			err = m_pRealMeetingUICtrl->ShowParticipantsListWnd(bShow, *hParticipantsListWnd);
		}
		else
		{
			err = ZOOM_SDK_NAMESPACE::SDKERR_INVALID_PARAMETER;
		}
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_SHOWPLISTWND, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowBottomFloatToolbarWnd(bool bShow)
{
	LOG_FUNC("CMeetingUICtrlWrap::ShowBottomFloatToolbarWnd");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam1 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError, bool >(this, &CMeetingUICtrlWrap::ShowBottomFloatToolbarWndTask, bShow, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowBottomFloatToolbarWndTask(bool bShow)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->ShowBottomFloatToolbarWnd(bShow);
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_SHOWBOTTOMTOOLBAR, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowJoinAudioDlg()
{
	LOG_FUNC("CMeetingUICtrlWrap::ShowJoinAudioDlg");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam0 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError >(this, &CMeetingUICtrlWrap::ShowJoinAudioDlgTask, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowJoinAudioDlgTask()
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->ShowJoinAudioDlg();
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_SHOWJOINAUDIODLG, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::HideJoinAudioDlg()
{
	LOG_FUNC("CMeetingUICtrlWrap::HideJoinAudioDlg");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		IJSCallTask* pTask = new TaskViaParam0 < CMeetingUICtrlWrap, ZOOM_SDK_NAMESPACE::SDKError >(this, &CMeetingUICtrlWrap::HideJoinAudioDlgTask, false);
		if (NULL == pTask)
			break;

		bool bPost = CSDKJSHelper::GetInstance().PostTask2WorkThread(pTask, sdkerr);
		if (CSDKJSHelper::GetInstance().IsThreadSplitMode())
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::HideJoinAudioDlgTask()
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->HideJoinAudioDlg();
	}
	CSDKJSHelper::GetInstance().NotifyAPICallResult(API_MEETINGUI_HIDEJOINAUDIODLG, err);
	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::GetWallViewPageInfo(ZOOM_SDK_NAMESPACE::VideoWallPageInfoParam& videoWallPageInfoParam)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->GetWallViewPageInfo(videoWallPageInfoParam);
	}

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::GetMeetingUIWnd(HWND& hFirstView, HWND& hSecondView)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->GetMeetingUIWnd(hFirstView, hSecondView);
	}

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CMeetingUICtrlWrap::ShowPreOrNextPageVideo(bool bPageUp)
{
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pRealMeetingUICtrl)
	{
		err = m_pRealMeetingUICtrl->ShowPreOrNextPageVideo(bPageUp);
	}

	return err;
}