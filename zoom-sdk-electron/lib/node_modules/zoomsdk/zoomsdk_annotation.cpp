
namespace zoomsdk {
	void Annotaion_IsAnnotaionDisable(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		CAnnotationCtrlWrap* pCtrl = CSDKJSHelper::GetInstance().GeAnnotationCtrl();
		bool bDisable(false);
		if (pCtrl)
		{
			bDisable = pCtrl->IsAnnoataionDisable();
		}

		Local<v8::Boolean> bret = v8::Boolean::New(isolate, bDisable);
		args.GetReturnValue().Set(bret);
	}

	void Annotaion_StartAnnotation(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 3) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber() ||
			!args[1]->IsNumber() ||
			!args[2]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}

		ZOOM_SDK_NAMESPACE::SDKViewType viewtype = (ZOOM_SDK_NAMESPACE::SDKViewType)(int)args[0]->NumberValue();
		int left = (int)args[1]->NumberValue();
		int top = (int)args[2]->NumberValue();
		CAnnotationCtrlWrap* pCtrl = CSDKJSHelper::GetInstance().GeAnnotationCtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pCtrl)
		{
			sdkerr = pCtrl->StartAnnotation(viewtype, left, top);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void Annotaion_StopAnnotation(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::SDKViewType viewtype = (ZOOM_SDK_NAMESPACE::SDKViewType)(int)args[0]->NumberValue();
		CAnnotationCtrlWrap* pCtrl = CSDKJSHelper::GetInstance().GeAnnotationCtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pCtrl)
		{
			sdkerr = pCtrl->StopAnnotation(viewtype);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void Annotaion_SetTool(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 2) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber() ||
			!args[1]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::SDKViewType viewtype = (ZOOM_SDK_NAMESPACE::SDKViewType)(int)args[0]->NumberValue();
		ZOOM_SDK_NAMESPACE::AnnotationToolType type = (ZOOM_SDK_NAMESPACE::AnnotationToolType)(int)args[1]->NumberValue();
		CAnnotationCtrlWrap* pCtrl = CSDKJSHelper::GetInstance().GeAnnotationCtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pCtrl)
		{
			sdkerr = pCtrl->SetTool(viewtype, type);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void Annotaion_Clear(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 2) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber() ||
			!args[1]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::SDKViewType viewtype = (ZOOM_SDK_NAMESPACE::SDKViewType)(int)args[0]->NumberValue();
		ZOOM_SDK_NAMESPACE::AnnotationClearType type = (ZOOM_SDK_NAMESPACE::AnnotationClearType)(int)args[1]->NumberValue();
		CAnnotationCtrlWrap* pCtrl = CSDKJSHelper::GetInstance().GeAnnotationCtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pCtrl)
		{
			sdkerr = pCtrl->Clear(viewtype, type);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void Annotaion_SetColor(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 2) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber() ||
			!args[1]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::SDKViewType viewtype = (ZOOM_SDK_NAMESPACE::SDKViewType)(int)args[0]->NumberValue();
		unsigned long color = (unsigned long)args[1]->NumberValue();
		CAnnotationCtrlWrap* pCtrl = CSDKJSHelper::GetInstance().GeAnnotationCtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pCtrl)
		{
			sdkerr = pCtrl->SetColor(viewtype, color);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void Annotaion_SetLineWidth(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 2) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber() ||
			!args[1]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::SDKViewType viewtype = (ZOOM_SDK_NAMESPACE::SDKViewType)(int)args[0]->NumberValue();
		long lineWidth = (long)args[1]->NumberValue();
		CAnnotationCtrlWrap* pCtrl = CSDKJSHelper::GetInstance().GeAnnotationCtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pCtrl)
		{
			sdkerr = pCtrl->SetLineWidth(viewtype, lineWidth);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void Annotaion_Undo(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::SDKViewType viewtype = (ZOOM_SDK_NAMESPACE::SDKViewType)(int)args[0]->NumberValue();
		CAnnotationCtrlWrap* pCtrl = CSDKJSHelper::GetInstance().GeAnnotationCtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pCtrl)
		{
			sdkerr = pCtrl->Undo(viewtype);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}

	void Annotaion_Redo(const FunctionCallbackInfo<Value>& args) {
		Isolate* isolate = args.GetIsolate();
		if (args.Length() < 1) {
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong number of arguments")));
			return;
		}
		if (!args[0]->IsNumber())
		{
			isolate->ThrowException(Exception::TypeError(
				String::NewFromUtf8(isolate, "Wrong arguments")));
			return;
		}
		ZOOM_SDK_NAMESPACE::SDKViewType viewtype = (ZOOM_SDK_NAMESPACE::SDKViewType)(int)args[0]->NumberValue();
		CAnnotationCtrlWrap* pCtrl = CSDKJSHelper::GetInstance().GeAnnotationCtrl();
		ZOOM_SDK_NAMESPACE::SDKError sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE;
		if (pCtrl)
		{
			sdkerr = pCtrl->Redo(viewtype);
		}

		Local<v8::Number> bret = v8::Number::New(isolate, (double)sdkerr);
		args.GetReturnValue().Set(bret);
	}
}