#include "sdk_js_helper.h"

CSDKJSHelper::CSDKJSHelper() 
{
	Reset();
}
CSDKJSHelper::~CSDKJSHelper() {}
void CSDKJSHelper::Reset()
{
	m_bInit = false;
	m_pAuthService = NULL;
	m_pMeetingService = NULL;
	m_bSplitmode = true;
	m_bInMeeting = false;
}
ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::InitSDK(std::wstring& path, std::wstring& domain, int langid, bool bsplitmode)
{
	LOG_FUNC("CSDKJSHelper::InitSDK");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN);
	if (!m_bInit)
	{
		myOutputDebugStringW(L"CSDKJSHelper::InitSDK-path->%s-domain->%s-langid->%d-splitmode->%d",
			path.c_str(), domain.c_str(), langid, bsplitmode);
		CJSThreadMgr::GetInstance().Init();
		if (CSDKImpl::GetInst().ConfigSDKModule(path))
		{
			m_bSplitmode = bsplitmode;
			TaskViaParam2<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, std::wstring, int>* pTask =
				new TaskViaParam2<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, std::wstring, int>(this, &CSDKJSHelper::ProcInitSDKTask, domain, langid, false);
			if (pTask)
			{
				m_bInit = PostTask2WorkThread(pTask, sdkerr);
				if (m_bSplitmode)
				{
					sdkerr = m_bInit ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
				}
			}
		}
		else
		{
			sdkerr = ZOOM_SDK_NAMESPACE::SDKERR_INVALID_PARAMETER;
			NotifyAPICallResult(API_INITSDK, sdkerr);
		}
	}

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::ProcInitSDKTask(std::wstring domain, int langid)
{
	LOG_FUNC("CSDKJSHelper::ProcInitSDKTask");
	ZOOM_SDK_NAMESPACE::InitParam param_;
	param_.strWebDomain = domain.c_str();
	param_.emLanguageID = (ZOOM_SDK_NAMESPACE::SDK_LANGUAGE_ID)langid;
	ZOOM_SDK_NAMESPACE::SDKError err = CSDKImpl::GetInst().InitSDK(param_);
	if (ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS == err)
	{
		err = CSDKImpl::GetInst().CreateAuthService(&m_pAuthService);
		if (m_pAuthService)
		{
			m_pAuthService->SetEvent(this);
		}

		if (ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS == err)
		{
			err = CSDKImpl::GetInst().CreateMeetingService(&m_pMeetingService);
			if (m_pMeetingService)
			{
				m_pMeetingService->SetEvent(this);
			}
		}
	}
	NotifyAPICallResult(API_INITSDK, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::CleanupSDK()
{
	LOG_FUNC("CSDKJSHelper::CleanupSDK");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_MEMORY_FAILED);
	TaskViaParam0<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError>* pTask =
		new TaskViaParam0<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError>(this, &CSDKJSHelper::ProcCleanupSDK, false);
	if (pTask)
	{
		bool bPost = PostTask2WorkThread(pTask, sdkerr);
		if (m_bSplitmode)
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	}

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::ProcCleanupSDK()
{
	LOG_FUNC("CSDKJSHelper::ProcCleanupSDK");
	if (m_pAuthService)
	{
		CSDKImpl::GetInst().DestroyAuthService(m_pAuthService);
		m_pAuthService = NULL;
	}
	if (m_pMeetingService)
	{
		CSDKImpl::GetInst().DestroyMeetingService(m_pMeetingService);
		m_pMeetingService = NULL;
	}
	ZOOM_SDK_NAMESPACE::SDKError err = CSDKImpl::GetInst().CleanUPSDK();
	NotifyAPICallResult(API_CLEANUPSDK, err);
	Reset();

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::SDKAuth(std::wstring& appkey, std::wstring& appsecret)
{
	LOG_FUNC("CSDKJSHelper::SDKAuth");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_MEMORY_FAILED);
	TaskViaParam2<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, std::wstring, std::wstring>* pTask =
		new TaskViaParam2<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, std::wstring, std::wstring>(this, &CSDKJSHelper::ProcSDKAuth, appkey, appsecret, false);
	if (pTask)
	{
		bool bPost = PostTask2WorkThread(pTask, sdkerr);
		if (m_bSplitmode)
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	}

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::ProcSDKAuth(std::wstring appkey, std::wstring appsecret)
{
	LOG_FUNC("CSDKJSHelper::ProcSDKAuth");
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pAuthService)
	{
		ZOOM_SDK_NAMESPACE::AuthParam param;
		param.appKey = appkey.c_str();
		param.appSecret = appsecret.c_str();
		err = m_pAuthService->SDKAuth(param);
	}

	NotifyAPICallResult(API_SDK_AUTH, err);

	return err;
}

void CSDKJSHelper::onAuthenticationReturn(ZOOM_SDK_NAMESPACE::AuthResult ret)
{
	LOG_FUNC("CSDKJSHelper::onAuthenticationReturn");
	TaskViaParam1<CSDKJSHelper, void, ZOOM_SDK_NAMESPACE::AuthResult>* pTask =
		new TaskViaParam1<CSDKJSHelper, void, ZOOM_SDK_NAMESPACE::AuthResult>(this, &CSDKJSHelper::onAuthenticationReturnTask, ret, false);
	if (pTask)
	{
		PostTask2JSThread(pTask);
	}
}

void CSDKJSHelper::onAuthenticationReturnTask(ZOOM_SDK_NAMESPACE::AuthResult ret)
{
	if (m_jsCBInfo.sdkauthCB.IsEmpty())
		return;

	LOG_FUNC("CSDKJSHelper::onAuthenticationReturnTask");
	auto isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	auto context = isolate->GetCurrentContext();
	auto global = context->Global();

	const int argc = 1;
	Handle<Value> argv[argc];
	argv[0] = Number::New(isolate, (double)ret);

	auto fn = Local<Function>::New(isolate, m_jsCBInfo.sdkauthCB);
	fn->Call(global, argc, argv);

	myOutputDebugString("onAuthenticationReturnTask-result-%d", ret);
}

void CSDKJSHelper::NotifyAPICallResult(const char* strAPI, ZOOM_SDK_NAMESPACE::SDKError err)
{
	if (!m_bSplitmode)
		return;

	if (NULL == strAPI)
		return;

	TaskViaParam2<CSDKJSHelper, void, std::string, ZOOM_SDK_NAMESPACE::SDKError>* pTask =
		new TaskViaParam2<CSDKJSHelper, void, std::string, ZOOM_SDK_NAMESPACE::SDKError>(this, &CSDKJSHelper::ProcNotifyAPICallResultTask, std::string(strAPI), err, false);
	if (pTask)
	{
		PostTask2JSThread(pTask);
	}
}

void CSDKJSHelper::ProcNotifyAPICallResultTask(std::string strAPI, ZOOM_SDK_NAMESPACE::SDKError err)
{
	if (m_jsCBInfo.apiResultCB.IsEmpty())
		return;

	auto isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	auto context = isolate->GetCurrentContext();
	auto global = context->Global();

	const int argc = 2;
	Handle<Value> argv[argc];
	argv[0] = String::NewFromUtf8(isolate, strAPI.c_str());
	argv[1] = Number::New(isolate, (double)err);
	auto fn = Local<Function>::New(isolate, m_jsCBInfo.apiResultCB);
	
	fn->Call(global, argc, argv);
	myOutputDebugString("CSDKJSHelper::ProcNotifyAPICallResultTask-apiname-%s-result-%d", strAPI.c_str(), err);
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::Login(std::wstring& username, std::wstring& psw, bool bRememberMe)
{
	LOG_FUNC("CSDKJSHelper::Login");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_MEMORY_FAILED);
	TaskViaParam3<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, std::wstring, std::wstring, bool>* pTask =
		new TaskViaParam3<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, std::wstring, std::wstring, bool>(this, &CSDKJSHelper::ProcLogin, username, psw, bRememberMe, false);
	if (pTask)
	{
		bool bPost = PostTask2WorkThread(pTask, sdkerr);
		if (m_bSplitmode)
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	}

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::ProcLogin(std::wstring username, std::wstring psw, bool bRememberMe)
{
	LOG_FUNC("CSDKJSHelper::ProcLogin");
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pAuthService)
	{
		ZOOM_SDK_NAMESPACE::LoginParam param;
		param.userName = username.c_str();
		param.password = psw.c_str();
		param.bRememberMe = bRememberMe;
		err = m_pAuthService->Login(param);
	}

	NotifyAPICallResult(API_LOGIN, err);
	return err;
}

void CSDKJSHelper::onLoginRet(ZOOM_SDK_NAMESPACE::LOGINSTATUS ret, ZOOM_SDK_NAMESPACE::IAccountInfo* pAccountInfo)
{
	LOG_FUNC("CSDKJSHelper::onLoginRet");
	TaskViaParam1<CSDKJSHelper, void, ZOOM_SDK_NAMESPACE::LOGINSTATUS>* pTask =
		new TaskViaParam1<CSDKJSHelper, void, ZOOM_SDK_NAMESPACE::LOGINSTATUS>(this, &CSDKJSHelper::onLoginRetTask, ret, false);
	if (pTask)
	{
		PostTask2JSThread(pTask);
	}
}

void CSDKJSHelper::onLoginRetTask(ZOOM_SDK_NAMESPACE::LOGINSTATUS ret)
{
	if (m_jsCBInfo.loginCB.IsEmpty())
		return;

	auto isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	auto context = isolate->GetCurrentContext();
	auto global = context->Global();

	const int argc = 1;
	Handle<Value> argv[argc];
	argv[0] = Number::New(isolate, (double)ret);
	auto fn = Local<Function>::New(isolate, m_jsCBInfo.loginCB);

	fn->Call(global, argc, argv);
	myOutputDebugString("onLoginRetTask-result-%d", ret);
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::Logout()
{
	LOG_FUNC("CSDKJSHelper::Logout");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_MEMORY_FAILED);
	TaskViaParam0<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError>* pTask = new TaskViaParam0<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError>(this, &CSDKJSHelper::ProcLogout, false);
	if (pTask)
	{
		bool bPost = PostTask2WorkThread(pTask, sdkerr);
		if (m_bSplitmode)
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	}

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::ProcLogout()
{
	LOG_FUNC("CSDKJSHelper::ProcLogout");
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	if (m_pAuthService)
	{
		err = m_pAuthService->LogOut();
	}

	NotifyAPICallResult(API_LOGOUT, err);

	return err;
}

void CSDKJSHelper::onLogout()
{
	LOG_FUNC("CSDKJSHelper::onLogout");
	TaskViaParam0<CSDKJSHelper, void>* pTask = new TaskViaParam0<CSDKJSHelper, void>(this, &CSDKJSHelper::onLogoutTask, false);
	if (pTask)
	{
		PostTask2JSThread(pTask);
	}
}

void CSDKJSHelper::onLogoutTask()
{
	LOG_FUNC("CSDKJSHelper::onLogoutTask");
	if (m_jsCBInfo.loginCB.IsEmpty())
		return;

	auto isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	auto context = isolate->GetCurrentContext();
	auto global = context->Global();
	auto fn = Local<Function>::New(isolate, m_jsCBInfo.loginCB);
	fn->Call(global, 0, NULL);
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::StartMeeting(SDKStartParam& param)
{
	LOG_FUNC("CSDKJSHelper::StartMeeting");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_MEMORY_FAILED);
	do 
	{
		SDKStartParam* pParam = new SDKStartParam;
		if (NULL == pParam)
			break;

		*pParam = param;
		TaskViaParam1<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, SDKStartParam* >* pTask =
			new TaskViaParam1<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, SDKStartParam* >(this, &CSDKJSHelper::ProcStartMeeting, pParam, true);

		if (NULL == pTask)
			break;

		bool bPost = PostTask2WorkThread(pTask, sdkerr);
		if (m_bSplitmode)
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::JoinMeeting(SDKJoinParam& param)
{
	LOG_FUNC("CSDKJSHelper::JoinMeeting");
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_MEMORY_FAILED);
	do
	{
		SDKJoinParam* pParam = new SDKJoinParam;
		if (NULL == pParam)
			break;

		*pParam = param;
		TaskViaParam1<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, SDKJoinParam* >* pTask =
			new TaskViaParam1<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, SDKJoinParam* >(this, &CSDKJSHelper::ProcJoinMeeting, pParam, true);

		if (NULL == pTask)
			break;

		bool bPost = PostTask2WorkThread(pTask, sdkerr);
		if (m_bSplitmode)
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	} while (false);

	return sdkerr;
}

void CSDKJSHelper::CongfigMeeting()
{
	if (m_pMeetingService)
	{
		ZOOM_SDK_NAMESPACE::IMeetingConfiguration* pConfig = m_pMeetingService->GetMeetingConfiguration();
		if (pConfig)
		{
			pConfig->SetSharingToolbarVisibility(true);
		}
	}
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::ProcStartMeeting(SDKStartParam* param)
{
	LOG_FUNC("CSDKJSHelper::ProcStartMeeting");
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do 
	{
		if (NULL == param)
		{
			err = ZOOM_SDK_NAMESPACE::SDKERR_INVALID_PARAMETER;
			break;
		}
		
		if (NULL == m_pMeetingService)
			break;

		CongfigMeeting();
		ZOOM_SDK_NAMESPACE::StartParam startparam;
		startparam.userType = ZOOM_SDK_NAMESPACE::SDK_UT_NORMALUSER;
		startparam.param.normaluserStart.meetingNumber = param->meetingnumber;
		err = m_pMeetingService->Start(startparam);
	} while (false);

	NotifyAPICallResult(API_STARTMEETING, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::ProcJoinMeeting(SDKJoinParam* param)
{
	LOG_FUNC("CSDKJSHelper::ProcJoinMeeting");
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		if (NULL == param)
		{
			err = ZOOM_SDK_NAMESPACE::SDKERR_INVALID_PARAMETER;
			break;
		}

		if (NULL == m_pMeetingService)
			break;

		CongfigMeeting();
		ZOOM_SDK_NAMESPACE::JoinParam joinparam;
		joinparam.userType = ZOOM_SDK_NAMESPACE::SDK_UT_NORMALUSER;
		joinparam.param.normaluserJoin.meetingNumber = param->meetingnumber;
		joinparam.param.normaluserJoin.userName = param->username.c_str();
		err = m_pMeetingService->Join(joinparam);
	} while (false);

	NotifyAPICallResult(API_JOINMEETING, err);

	return err;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::LeaveMeeting(bool bEnd)
{
	ZOOM_SDK_NAMESPACE::SDKError sdkerr(ZOOM_SDK_NAMESPACE::SDKERR_MEMORY_FAILED);
	TaskViaParam1<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, bool>* pTask =
		new TaskViaParam1<CSDKJSHelper, ZOOM_SDK_NAMESPACE::SDKError, bool>(this, &CSDKJSHelper::ProcLeaveMeeting, bEnd, false);
	if (pTask)
	{
		bool bPost = PostTask2WorkThread(pTask, sdkerr);
		if (m_bSplitmode)
		{
			sdkerr = bPost ? ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS : ZOOM_SDK_NAMESPACE::SDKERR_UNKNOWN;
		}
	}
	return sdkerr;
}

ZOOM_SDK_NAMESPACE::SDKError CSDKJSHelper::ProcLeaveMeeting(bool bEnd)
{
	LOG_FUNC("CSDKJSHelper::ProcLeaveMeeting");
	ZOOM_SDK_NAMESPACE::SDKError err(ZOOM_SDK_NAMESPACE::SDKERR_WRONG_USEAGE);
	do
	{
		if (NULL == m_pMeetingService)
			break;
		
		err = m_pMeetingService->Leave(bEnd ? ZOOM_SDK_NAMESPACE::END_MEETING : ZOOM_SDK_NAMESPACE::LEAVE_MEETING);
	} while (false);

	NotifyAPICallResult(API_JOINMEETING, err);
	return err;
}

void CSDKJSHelper::onMeetingStatusChanged(ZOOM_SDK_NAMESPACE::MeetingStatus status, int iResult)
{
	LOG_FUNC("CSDKJSHelper::onMeetingStatusChanged");
	TaskViaParam2<CSDKJSHelper, void, ZOOM_SDK_NAMESPACE::MeetingStatus, int>* pTask =
		new TaskViaParam2<CSDKJSHelper, void, ZOOM_SDK_NAMESPACE::MeetingStatus, int>(this, &CSDKJSHelper::onMeetingStatusChangedTask, status, iResult, false);
	if (pTask)
	{
		PostTask2JSThread(pTask);
	}
}

void CSDKJSHelper::onMeetingStatusChangedTask(ZOOM_SDK_NAMESPACE::MeetingStatus status, int iResult)
{
	if (m_jsCBInfo.meetingstatusCB.IsEmpty())
		return;

	if (ZOOM_SDK_NAMESPACE::MEETING_STATUS_INMEETING == status ||
		ZOOM_SDK_NAMESPACE::MEETING_STATUS_LOCKED == status ||
		ZOOM_SDK_NAMESPACE::MEETING_STATUS_UNLOCKED == status)
	{
		if (m_pMeetingService)
		{
			m_obMeetingUICtrlWrap.SetMeetingUIObj(m_pMeetingService->GetUIController());
		}

		if (m_pMeetingService)
		{
			m_obAnnotationCtrlWrap.SetIAnnotationObj(m_pMeetingService->GetAnnotationController());
		}

		m_bInMeeting = true;
	}
	else
	{
		m_obMeetingUICtrlWrap.SetMeetingUIObj(NULL);
		m_obAnnotationCtrlWrap.SetIAnnotationObj(NULL);
		m_bInMeeting = false;
	}

	auto isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	auto context = isolate->GetCurrentContext();
	auto global = context->Global();

	const int argc = 2;
	Handle<Value> argv[argc];
	argv[0] = Number::New(isolate, (double)status);
	argv[1] = Number::New(isolate, (double)iResult);
	auto fn = Local<Function>::New(isolate, m_jsCBInfo.meetingstatusCB);

	fn->Call(global, argc, argv);
	myOutputDebugString("onMeetingStatusChangedTask-status-%d-result-%d", status, iResult);
}

CMeetingUICtrlWrap* CSDKJSHelper::GetMeetingUICtrl()
{
	if (m_bInMeeting)
	{
		return &m_obMeetingUICtrlWrap;
	}

	return NULL;
}

CAnnotationCtrlWrap* CSDKJSHelper::GeAnnotationCtrl()
{
	if (m_bInMeeting)
	{
		return &m_obAnnotationCtrlWrap;
	}

	return NULL;
}

